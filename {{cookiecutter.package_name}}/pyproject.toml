[tool.poetry]
name = "{{cookiecutter.package_name}}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.author_name }} <{{ cookiecutter.author_email }}>"]
readme = "README.rst"
repository = "{{ cookiecutter.project_url }}"
keywords = []
license = "{{ cookiecutter.project_license }}"
classifiers = [
    "Programming Language :: Python",
]

[tool.poetry.dependencies]
python = "^{{ cookiecutter.python_version }}"
structlog = "^21.1.0"

[tool.poetry.dev-dependencies]
bump2version = "^1.0.0"
flake8 = "^3.7"
flake8-isort = "^4.0.0"
ipython = "^7.15.0"
isort = "^5.6.4"
konch = "^4.2.2"
mypy = "^0.910"
pdbpp = "^0.10.0"
pre-commit = "^2.4.0"
pytest = "^6.1.2"
pytest-black = "^0.3.7"
pytest-cov = "^2.7"
pytest-flake8 = "^1.0"
pytest-mock = "^3.1.0"
pytest-mypy = "^0.8.1"
pytest-randomly = "^3.0"
pytest-xdist = "^2.1.0"
sphinx = "^3.0.4"
tox = "^3.15.1"
black = "^21.7b0"
hypothesis = "^6.17.0"
mutmut = "^2.2.0"

[tool.black]
line-length = 79
skip-string-normalization = true
target_version = ['py{{ cookiecutter.python_version|replace(".", "") }}']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.direnv
     | \.eggs
     | \.git
     | \.hg
     | \.mypy_cache
     | \.nox
     | \.tox
     | \.venv
     | venv
     | \.svn
     | _build
     | buck-out
     | build
     | dist
     | __pypackages__
     | \{\{cookiecutter\.package_name\}\}\/tests
 )/
)
'''

[tool.coverage.run]
branch = true
source = ["{{ cookiecutter.package_name }}", "tests"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise NotImplementedError",
    "import",
]
show_missing = true
skip_covered = false
fail_under = 100

[tool.isort]
force_grid_wrap = 0
force_single_line = true
include_trailing_comma = true
lines_after_imports = 2
multi_line_output = 3
use_parentheses = true
known_third_party = []
default_section = "THIRDPARTY"
known_first_party = "{{ cookiecutter.package_name }}"
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
