# Builds and publishes to testpypi on every push to main
# On release, publishes to pypi
name: publish

on:
  push:
    branches:
      - main
  release:
    types: [published]

env:
  PYTHON_VERSION: {{ cookiecutter.python_version }}
  UV_VERSION: {{ cookiecutter.uv_version }}

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      version: {% raw %}${{ steps.version.outputs.version }}{% endraw %}
    permissions:
      contents: read

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}

      - name: Install uv {% raw %}${{ env.UV_VERSION }}{% endraw %}
        uses: astral-sh/setup-uv@v6
        with:
          version: {% raw %}${{ env.UV_VERSION }}{% endraw %}
          enable-cache: true
          cache-suffix: uv_publish

      - name: Set version with dunamai
        uses: mtkennerly/dunamai-action@v1
        id: version
        with:
          command: dunamai from git
          args: --no-metadata --style semver

      - run: echo {% raw %}${{ steps.version.outputs.version }}{% endraw %}
      - run: uv version {% raw %}${{ steps.version.outputs.version }}{% endraw %}

      - name: uv build
        run: uv build

      - uses: actions/upload-artifact@v2
        with:
          name: uv_build
          path: dist/

  publish_test_pypi:
    if: github.repository_owner == '{{ cookiecutter.github_repository_owner }}'
    runs-on: ubuntu-latest
    needs: build
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}

      - uses: actions/download-artifact@v2
        with:
          name: uv_build
          path: dist/

      - name: Install uv {% raw %}${{ env.UV_VERSION }}{% endraw %}
        uses: astral-sh/setup-uv@v6
        with:
          version: {% raw %}${{ env.UV_VERSION }}{% endraw %}
          enable-cache: true
          cache-suffix: uv_publish

      - run: uv version {% raw %}${{ needs.build.outputs.version }}{% endraw %}

      - name: uv configure TestPyPI Repo
        run: uv config repositories.test-pypi https://test.pypi.org/legacy/

      - name: uv configure TestPyPI Token
        run:  uv config pypi-token.test-pypi {% raw %}${{ secrets.TEST_PYPI_API_TOKEN }}{% endraw %}

      - name: uv publish TestPyPi
        run: uv publish -r test-pypi

  publish_pypi:
    if: github.repository_owner == '{{ cookiecutter.github_repository_owner }}' && github.event_name == 'release' && github.event.action == 'published'
    runs-on: ubuntu-latest
    needs: [build, publish_test_pypi]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - uses: actions/setup-python@v5
        with:
          python-version: {% raw %}${{ env.PYTHON_VERSION }}{% endraw %}

      - uses: actions/download-artifact@v2
        with:
          name: uv_build
          path: dist/

      - name: Install uv {% raw %}${{ env.UV_VERSION }}{% endraw %}
        uses: astral-sh/setup-uv@v6
        with:
          version: {% raw %}${{ env.UV_VERSION }}{% endraw %}
          enable-cache: true
          cache-suffix: uv_publish

      - run: uv version {% raw %}${{ needs.build.outputs.version }}{% endraw %}

      - name: uv configure PyPI Token
        run: uv config pypi-token.pypi {% raw %}${{ secrets.PYPI_API_TOKEN }}{% endraw %}

      - name: uv publish PyPi
        run: uv publish
