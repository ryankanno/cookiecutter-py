[tool.poetry]
name = "cookiecutter-py"
version = "0.0.0"
description = "🐍 Modern Python project Cookiecutter template"
authors = ["Ryan <ryankanno@localkinegrinds.com>"]
maintainers = ["Ryan <ryankanno@localkinegrinds.com>"]
readme = "README.md"
repository = "https://github.com/ryankanno/cookiecutter-py"
keywords = ["cookiecutter"]
license = "MIT"
classifiers = [
    "Programming Language :: Python",
]
packages = [
  {include = "cookiecutter_py"}
]
include = [
  '{{cookiecutter.package_name}}/**/*',
  'cookiecutter.json',
  'hooks/*'
]

[tool.poetry.dependencies]
python = ">=3.9,<3.12"
cookiecutter = "^2.6.0"

[tool.poetry.dev-dependencies]
pytest = "^8.3.3"
pytest-cookies = "^0.7.0"
black = "^24.8.0"
pre-commit = "^4.0.0"
tox = "^4.21.2"
mypy = "^1.11.2"
pytest-cov = "^5.0.0"
pytest-xdist = "^3.6.1"
ruff = "^0.6.9"

[tool.poetry.group.docs]
optional = true

[tool.poetry.group.docs.dependencies]
sphinx = "^7.4.7"
sphinx-autobuild = "^2024.10.3"
furo = "^2024.8.6"
myst-parser = {extras = ["linkify"], version = "^3.0.1"}

[tool.mypy]
python_version = "3.11"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = false
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = false
exclude = [
    'cookiecutter\.package_name',
]

[tool.black]
line-length = 79
skip-string-normalization = true
target-version = ['py311']
include = '\.pyi?$'
exclude = '''
(
  /(
     \.ruff_cache
     | \.direnv
     | \.eggs
     | \.git
     | \.hg
     | \.mypy_cache
     | \.nox
     | \.tox
     | \.venv
     | venv
     | \.svn
     | _build
     | buck-out
     | build
     | dist
     | __pypackages__
     | \{\{cookiecutter\.package_name\}\}\/docs
     | \{\{cookiecutter\.package_name\}\}\/tests
 )/
)
'''

[tool.pytest.ini_options]
minversion = "7.4"
addopts = "-n auto"
testpaths = [
    "tests",
]
norecursedirs = ["{{cookiecutter.package_name}}"]

[tool.coverage.run]
parallel = true
branch = true
source = [
    "hooks"
]
omit = [
    "*/{{cookiecutter.package_name}}/*",
    "*/python?.?/*",
    "*/tests/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
skip_covered = false

[tool.isort]
force_grid_wrap = 0
force_single_line = true
include_trailing_comma = true
lines_after_imports = 2
multi_line_output = 3
use_parentheses = true
known_third_party = [""]
default_section = "THIRDPARTY"
known_first_party = "{{ cookiecutter.package_name }}"
sections = "FUTURE,STDLIB,THIRDPARTY,FIRSTPARTY,LOCALFOLDER"
skip = "tests"

[tool.vulture]
make_whitelist = true
min_confidence = 80
paths = ["hooks", "tests"]
sort_by_size = true

[tool.ruff]
extend-exclude = ['[{][{]cookiecutter.package_name[}][}]/tests', '[{][{]cookiecutter.package_name[}][}]/docs', 'docs']
line-length = 79

[tool.ruff.lint.mccabe]
max-complexity = 10

[tool.ruff.lint.pydocstyle]
convention = "google"

[tool.ruff.lint]
preview = true
select = [
    "A",    # python builtins being used as variables or parameters
    "ANN",  # annotations
    "ARG",  # unused function arguments
    "B",    # common design problems (flake8-bugbear)
    "BLE",  # blind exception catching
    "C4",   # proper comprehensions
    "C9",   # mccabe complexity
    "D",    # docstring conventions (pydocstyle)
    "D417", # missing args in docstrings
    "DTZ",  # unsafe naive datetime use (flake8-datetimez)
    "E",    # code style conventions (pycodestyle)
    "EM",   # raw literals inside exception (flake8-errmsg)
    "F",    # python source code for errors (pyflakes)
    "FIX",  # temporary developer notes (flake8-fixme)
    "FURB", # code improvements (refurb)
    "G",    # logging string formatting (flake8-logging-format)
    "LOG",  # logging module usage (flake8-logging)
    "PERF", # performance anti-patterns (perflint)
    "PGH",  # pygrep hooks
    "PIE",  # misc (flake8-pie)
    "PL",   # code errors and smells (pylint)
    "PT",   # common pytest issues
    "PTH",  # pathlib usage
    "RET",  # return statements (flake8-return)
    "RSE",  # exception raise statements (flake8-raise)
    "S",    # security testing (flake8-bandit)
    "SIM",  # code simplicity (flake8-simplify)
    "T20",  # for any print statements
    "TRY",  # exception handling anti-patterns (tryceratops)
    "UP",   # outdated syntax (pyupgrade)
    "W",    # code style conventions (pycodestyle)
]
ignore = [
    "D100",
    "D103",
    "D104",
]

[tool.ruff.lint.per-file-ignores]
"tests/test_*.py" = ["S101"]

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
