[tool.poetry]
name = "cookiecutter-py"
version = "0.0.0"
description = "🐍 Modern Python project Cookiecutter template"
authors = ["Ryan <ryankanno@localkinegrinds.com>"]
maintainers = ["Ryan <ryankanno@localkinegrinds.com>"]
readme = "README.md"
repository = "https://github.com/ryankanno/cookiecutter-py"
keywords = ["cookiecutter"]
license = "MIT"
classifiers = [
    "Programming Language :: Python",
]
packages = [
  {include = "cookiecutter_py"}
]
include = [
  '{{cookiecutter.package_name}}/**/*',
  'cookiecutter.json',
  'hooks/*'
]

[tool.poetry.dependencies]
python = "^3.8"
cookiecutter = "^2.1.1"

[tool.poetry.dev-dependencies]
pytest = "^7.2.0"
pytest-cookies = "^0.6.1"
flake8 = "^5.0.4"
black = "^22.6.0"
pre-commit = "^2.20.0"
tox = "^3.25.1"
mypy = "^0.991"
pytest-cov = "^3.0.0"
pytest-xdist = "^2.5.0"

[tool.mypy]
python_version = "3.8"
check_untyped_defs = true
disallow_any_generics = true
disallow_incomplete_defs = true
disallow_subclassing_any = true
disallow_untyped_calls = true
disallow_untyped_decorators = true
disallow_untyped_defs = true
follow_imports = "normal"
ignore_missing_imports = true
no_implicit_optional = true
no_implicit_reexport = false
show_error_codes = true
show_error_context = true
strict_equality = true
strict_optional = true
warn_redundant_casts = true
warn_return_any = true
warn_unused_configs = true
warn_unused_ignores = false
exclude = [
    'cookiecutter\.package_name',
]

[tool.black]
line-length = 79
skip-string-normalization = true
target_version = ['py38']
include = '\.pyi?$'
exclude = '''
(
  /(
      \.direnv
     | \.eggs
     | \.git
     | \.hg
     | \.mypy_cache
     | \.nox
     | \.tox
     | \.venv
     | venv
     | \.svn
     | _build
     | buck-out
     | build
     | dist
     | __pypackages__
     | \{\{cookiecutter\.package_name\}\}\/tests
 )/
)
'''

[tool.pytest.ini_options]
minversion = "7.0"
addopts = "-n auto"
testpaths = [
    "tests/",
]

[tool.coverage.run]
parallel = true
branch = true
source = [
    "hooks"
]
omit = [
    "*/{{cookiecutter.package_name}}/*",
    "*/python?.?/*",
    "*/tests/*"
]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
]
show_missing = true
skip_covered = false

[tool.vulture]
make_whitelist = true
min_confidence = 80
paths = ["hooks", "tests"]
sort_by_size = true

[build-system]
requires = ["poetry-core>=1.0.0"]
build-backend = "poetry.core.masonry.api"
